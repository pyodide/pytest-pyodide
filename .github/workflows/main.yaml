name: main

on:
  workflow_call:
    inputs:
      build-artifact-name:
        required: true
        type: string
      build-artifact-path:
        required: true
        type: string
      pyodide-version:
        required: false
        type: string
        default: "0.27.2"
      os:
        required: false
        type: string
        default: "ubuntu-latest"
      runner:
        required: false
        type: string
        default: "selenium"
      browser:
        required: false
        type: string
        default: "chrome"
      browser-version:
        required: false
        type: string
        default: "latest"
      playwright-version:
        required: false
        type: string
        default: "" # latest
      pytest-extra-args:
        required: false
        type: string
        default: ""
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ inputs.os }}-${{ inputs.runner }}-${{ inputs.browser }}-${{ inputs.browser-version }}-${{ inputs.pyodide-version }}-${{ inputs.playwright-version }}
  cancel-in-progress: true

jobs:
  test:
    name: test (${{ inputs.pyodide-version}},${{ inputs.browser }},${{ inputs.runner }})
    runs-on: ${{ inputs.os }}
    env:
      DISPLAY: :99
      FORCE_COLOR: 3
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install node
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        if: ${{ contains(inputs.browser, 'node') || inputs.runner == 'playwright' }}
        with:
          node-version: ${{ inputs.browser-version }}

      - name: Cache Playwright browsers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        if: ${{ inputs.runner == 'playwright' }}
        with:
          path: .cache/ms-playwright
          key: ${{ runner.os }}-playwright-latest

      - name: Install playwright
        if: ${{ inputs.runner == 'playwright' }}
        run: |
          if [ -n "${{ inputs.playwright-version }}" ]
          then
            python -m pip install playwright==${{inputs.playwright-version}}
          else
            python -m pip install playwright
          fi
          # TODO: install only browsers that are required
          python -m playwright install --with-deps

      - uses: pyodide/pyodide-actions/download-pyodide@012fa537869d343726d01863a34b773fc4d96a14 # v2
        with:
          version: ${{ inputs.pyodide-version }}
          to: pyodide-dist

      - uses: pyodide/pyodide-actions/install-browser@012fa537869d343726d01863a34b773fc4d96a14 # v2
        with:
          runner: ${{ inputs.runner }}
          browser: ${{ inputs.browser }}
          browser-version: ${{ inputs.browser-version }}
          playwright-version: ${{ inputs.playwright-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts from calling package
        if: ${{ inputs.build-artifact-name != 'none' }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-path }}
          merge-multiple: true

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: 3.12

      - name: install pyodide-py
        run: |
          python -m pip install pyodide-py==${{inputs.pyodide-version}}

      - name: Install pytest-pyodide
        run: |
          if [ -d "pytest_pyodide" ]; then
            # Currently we only install the package for dependencies.
            # We then uninstall it otherwise tests fails due to pytest hook being
            # registered twice.
            # temporarily pin pytest version (https://github.com/pyodide/pytest-pyodide/pull/133#issuecomment-2081412407)
              python -m pip install ".[test]" "pytest<8.0.0" "selenium<4.21.0"
          else
              python -m pip install pytest-pyodide
          fi

      - name: Run tests
        run: |
          python -m pytest -vra \
            --cov=pytest_pyodide \
            --dist-dir=./pyodide-dist/ \
            --runner=${{ inputs.runner }} \
            --rt=${{ inputs.browser }} \
            ${{ inputs.pytest-extra-args }}
      - name: Check for coverage file
        id: check_coverage
        uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6 # v3.0.0
        with:
          files: "coverage.xml"
      - uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1
        if: ${{ steps.check_coverage.outputs.files_exists }}
        with:
          fail_ci_if_error: false
